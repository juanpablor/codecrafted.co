@tailwind base;
@tailwind components;
@tailwind utilities;
@import url('https://fonts.googleapis.com/css2?family=Bungee&display=swap');

@font-face {
    font-family: "Bakemono";
    src: url("../fonts/bakemono_regular.woff");
    font-weight: normal;
    font-style: normal;
}

.bungee-regular {
    font-family: "Bungee", sans-serif;
    font-weight: 400;
    font-style: normal;
  }

  .Bakemono {
    font-family: "Bakemono", sans-serif;
    font-weight: 400;
    font-style: normal;
  }
  

body {
    background: rgb(var(--color-dark-rgb));
    background-image: url("../images/bg_3.jpg");
    background-size: cover;
    background-position: top center;
    background-repeat: no-repeat;
}

.gradient {
    background: linear-gradient(135deg,  rgb(var(--color-purplesemidark-rgb)) 0%,rgb(var(--color-dark-rgb)) 36%,rgb(var(--color-primary-rgb)) 56%,rgb(var(--color-purpledark-rgb)) 100%);
    background-repeat: no-repeat;
}

.reverse {
    flex-direction: row-reverse;
}

.klaro {
    background-color: #f0f0f0;
    color: #333;
    .cookie-modal {
        border-radius: 8px;
        padding: 20px;
        button {
            background-color: #007acc;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            &:hover {
                background-color: rgb(var(--color-purplelight-rgb)) !important;
                color: rgb(var(--color-purpledark-rgb)) !important;    
            }
        }
        .cm-modal.cm-klaro {
            background: rgb(var(--color-purplesemidark-rgb));
        }
        a {
            color: rgb(var(--color-purplelight-rgb)) !important;
        }
        .cm-list-input:checked+.cm-list-label .slider {
            background: rgb(var(--color-purplelight-rgb)) !important;
        }
        .cm-btn.cm-btn-info {
            background: rgb(var(--color-purplelight-rgb)) !important;
            color: rgb(var(--color-purpledark-rgb)) !important;            
        }
        .cm-modal .cm-footer .cm-powered-by {
            display: none;
        }
    }
    .cookie-notice {
        &:not(.cookie-modal-notice) {
            background: rgb(var(--color-primary-rgb));
        }
        a {
            color: rgb(var(--color-purplelight-rgb)) !important;
        }
        .cm-btn.cm-btn-success {
            background: rgb(var(--color-purplelight-rgb)) !important;
            color: rgb(var(--color-purpledark-rgb)) !important;
        }
    }
}
  



.slash {
    &:first-child {
        &:after {
            width: 100px;
            left:310px;
            top:110px
        }
        .copy {
            margin-left: -150px;
        }
    }    
    &:last-child {
        &:after {
            width: 100px;
            left:650px;
            top:30px
        }
        .copy {
            margin-left: 150px;
        }
    }
    &:nth-child(2) {
        text-align: center;
        .arrow {
            display: flex;
            position: absolute;
            right: -12px;
            top:-16px;
            font-size: 4rem;
            color: rgb(var(--color-purplelight-rgb));
            z-index: 40;
        }
    }
    &:nth-child(3) .title {
        justify-content: center;
    }
       
    &:after {
        content: "";
        position: absolute;
        top: 50%;
        left: 100%;
        width: 200px;
        height: 2px;
        background-color: rgb(var(--color-purplesemilight-rgb));
        transform: rotate(45deg) rotate(45deg);
        -webkit-transform: rotate(45deg);
        -moz-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        -o-transform: rotate(45deg);

    }
}

.slash:before {
    content: "";
    position: absolute;
    width: 16px;
    height: 16px;
    border-radius: 100%;
    background-color: rgb(var(--color-purplesemilight-rgb));
    -webkit-border-radius: 100%;
    -moz-border-radius: 100%;
    -ms-border-radius: 100%;
    -o-border-radius: 100%;
}

.flex-row:not(:last-child) .title::after {
    background-color: #999;
}

$startSlash: 220px;
$startDot: 310px;
$increment: 140px;
$count: 4;

@for $i from 0 through $count - 1 {
  .pos_#{$i}:after {
    left: $startSlash + $i * $increment;
  }
  .pos_#{$i}:before {
    left: $startDot + $i * $increment;
  }
}
